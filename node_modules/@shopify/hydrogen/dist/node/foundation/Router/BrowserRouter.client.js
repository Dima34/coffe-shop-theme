"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useLocation = exports.useRouter = exports.BrowserRouter = exports.RouterContext = void 0;
const history_1 = require("history");
const react_1 = __importStar(require("react"));
const ssr_interop_1 = require("../ssr-interop");
const useServerState_1 = require("../useServerState");
exports.RouterContext = (0, react_1.createContext)({});
let currentPath = '';
let isFirstLoad = true;
const BrowserRouter = ({ history: pHistory, children, }) => {
    if (ssr_interop_1.META_ENV_SSR)
        return react_1.default.createElement(react_1.default.Fragment, null, children);
    const history = (0, react_1.useMemo)(() => pHistory || (0, history_1.createBrowserHistory)(), [pHistory]);
    const [location, setLocation] = (0, react_1.useState)(history.location);
    const { pending, serverState, setServerState } = (0, useServerState_1.useServerState)();
    (0, react_1.useEffect)(() => {
        // The app has just loaded
        if (isFirstLoad)
            isFirstLoad = false;
        // A navigation event has just happened
        else if (!pending && currentPath !== serverState.pathname) {
            window.scrollTo(0, 0);
        }
        currentPath = serverState.pathname;
    }, [pending]);
    (0, react_1.useEffect)(() => {
        const unlisten = history.listen(({ location: newLocation }) => {
            setServerState({
                pathname: newLocation.pathname,
                search: location.search || undefined,
            });
            setLocation(newLocation);
        });
        return () => unlisten();
    }, [history]);
    return (react_1.default.createElement(exports.RouterContext.Provider, { value: {
            history,
            location,
        } }, children));
};
exports.BrowserRouter = BrowserRouter;
function useRouter() {
    const router = (0, react_1.useContext)(exports.RouterContext);
    if (!router && ssr_interop_1.META_ENV_SSR) {
        throw new Error('useRouter must be used within a <Router> component');
    }
    return router;
}
exports.useRouter = useRouter;
function useLocation() {
    return useRouter().location;
}
exports.useLocation = useLocation;
